// Initialize Google Generative AI
async function initializeAI() {
    if (!window.GOOGLE_API_KEY) {
        throw new Error('API key is not configured');
    }

    try {
        const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro?key=' + window.GOOGLE_API_KEY, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        if (!response.ok) {
            throw new Error('API request failed: ' + response.statusText);
        }

        return true;
    } catch (error) {
        console.error('Error initializing AI:', error);
        throw error;
    }
}

// Chat elements
const messagesContainer = document.querySelector('.messages-container');
const messageInput = document.querySelector('.message-input');
const sendButton = document.querySelector('.send-button');
const clearButton = document.querySelector('.clear-button');
const typingIndicator = document.querySelector('.typing-indicator');
const suggestionChips = document.querySelectorAll('.suggestion-chip');
const themeButton = document.querySelector('.theme-button');

// Theme handling
let isDarkTheme = true;
themeButton.addEventListener('click', () => {
    isDarkTheme = !isDarkTheme;
    document.body.classList.toggle('light-theme');
    themeButton.querySelector('.theme-icon').textContent = isDarkTheme ? 'üåô' : '‚òÄÔ∏è';
});

// Initialize chat model
let isInitialized = false;
let chatHistory = [];

function addMessage(content, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    messageContent.innerHTML = content;
    
    messageDiv.appendChild(messageContent);
    messagesContainer.appendChild(messageDiv);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if (sender === 'bot') {
        lastResponseTime = Date.now();
    }
}

async function generateAIResponse(message) {
    const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + window.GOOGLE_API_KEY, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            contents: [{
                parts: [{
                    text: message
                }]
            }]
        })
    });

    if (!response.ok) {
        throw new Error('API request failed: ' + response.statusText);
    }

    const data = await response.json();
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
        throw new Error('Invalid response format');
    }

    return data.candidates[0].content.parts[0].text;
}

async function sendMessage(message) {
    if (!message.trim()) {
        console.error('Cannot send empty message');
        return;
    }

    try {
        // Show user message
        addMessage(message, 'user');
        messageInput.value = '';
        messageInput.style.height = 'auto';

        // Show typing indicator
        typingIndicator.style.display = 'flex';

        // Generate AI response
        const response = await generateAIResponse(message);

        // Hide typing indicator and show AI response
        typingIndicator.style.display = 'none';
        addMessage(response, 'bot');

    } catch (error) {
        console.error('Error sending message:', error);
        typingIndicator.style.display = 'none';
        addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'system');
    }
}

// Event listeners
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage(messageInput.value);
    }
});

sendButton.addEventListener('click', () => {
    sendMessage(messageInput.value);
});

clearButton.addEventListener('click', () => {
    messagesContainer.innerHTML = '';
    chatHistory = [];
    const welcomeMessage = document.querySelector('.welcome-message');
    if (welcomeMessage) {
        const newWelcome = welcomeMessage.cloneNode(true);
        messagesContainer.appendChild(newWelcome);
    }
});

suggestionChips.forEach(chip => {
    chip.addEventListener('click', () => {
        messageInput.value = chip.textContent;
        sendMessage(chip.textContent);
    });
});

// Auto-resize textarea
messageInput.addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = (this.scrollHeight) + 'px';
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è highlight.js
document.addEventListener('DOMContentLoaded', (event) => {
    document.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightBlock(block);
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
function formatCode(code, language = 'python') {
    return `<pre><code class="language-${language}">${code}</code></pre>`;
}

function formatCapabilities() {
    return `
        <div class="main-text fade-in">–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤–æ –º–Ω–æ–≥–∏—Ö –≤–µ—â–∞—Ö, –≤ —Ç–æ–º —á–∏—Å–ª–µ:</div>

        <div class="section-header">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ñ–∞–∫—Ç—ã</div>
        <ul class="capability-list">
            <li class="capability-item">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É —Ç–µ–º.</li>
            <li class="capability-item">–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –Ω–∞—É–∫–µ, –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç. –¥.</li>
        </ul>

        <div class="section-header">–ó–∞–¥–∞—á–∏</div>
        <ul class="capability-list">
            <li class="capability-item">–í—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏.</li>
            <li class="capability-item">–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è.</li>
            <li class="capability-item">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —Å–∏–Ω–æ–Ω–∏–º—ã.</li>
        </ul>

        <div class="section-header">–ü–µ—Ä–µ–≤–æ–¥</div>
        <ul class="capability-list">
            <li class="capability-item">–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ —Ñ—Ä–∞–∑—ã –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 100 —è–∑—ã–∫–æ–≤.</li>
        </ul>

        <div class="section-header">–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ</div>
        <ul class="capability-list">
            <li class="capability-item">–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑—ã, —Å—Ç–∏—Ö–∏ –∏ –ø–µ—Å–Ω–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.</li>
            <li class="capability-item">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–¥–µ–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–Ω—è—Ç–∏–π.</li>
        </ul>

        <div class="section-header">–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
        <ul class="capability-list">
            <li class="capability-item">–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏.</li>
            <li class="capability-item">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏ –Ω–æ–≤–æ—Å—Ç–µ–π.</li>
            <li class="capability-item">–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —è–∑—ã–∫ –Ω–∞ —è–∑—ã–∫ –∂–µ—Å—Ç–æ–≤.</li>
        </ul>

        <div class="section-header">–û–±—É—á–µ–Ω–∏–µ</div>
        <ul class="capability-list">
            <li class="capability-item">–û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏ –æ–±—ä—è—Å–Ω—è—Ç—å –Ω–∞—É—á–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è.</li>
            <li class="capability-item">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.</li>
            <li class="capability-item">–ü–æ–º–æ–≥–∞—Ç—å —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º.</li>
        </ul>

        <div class="section-header">–û—Ç–¥—ã—Ö –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</div>
        <ul class="capability-list">
            <li class="capability-item">–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å –º—É–∑—ã–∫—É, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã –∏ –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã.</li>
            <li class="capability-item">–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø—ã, –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –ø–æ–≥–æ–¥—É –∏ –∫—É—Ä—Å—ã –∞–∫—Ü–∏–π.</li>
            <li class="capability-item">–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã, –∫–Ω–∏–≥–∏ –∏ –ø–æ–¥–∫–∞—Å—Ç—ã.</li>
        </ul>

        <div class="main-text fade-in">
            –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±—É—á–∞—é—Å—å –∏ —É–ª—É—á—à–∞—é —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è —è —Å–º–æ–≥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –≤ –Ω–æ–≤—ã—Ö –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –≤–µ—â–∞—Ö.
            <br><br>
            –°–æ–æ–±—â–∏—Ç–µ –º–Ω–µ, –∫–∞–∫ —è –º–æ–≥—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è.
        </div>
    `;
}

function formatPythonExample() {
    return `
        <div class="code-section">
            <div class="section-title">Hello World –Ω–∞ Python</div>
            <div class="python-code">
<span class="py-keyword">def</span> <span class="py-function">hello_world</span>():
    <span class="py-triple-quotes">"""</span>
    <span class="py-docstring">This function prints "Hello, World!" to the console.</span>
    <span class="py-triple-quotes">"""</span>
    <span class="py-keyword">print</span>(<span class="py-string">"Hello, World!"</span>)

<span class="py-keyword">def</span> <span class="py-function">main</span>():
    <span class="py-triple-quotes">"""</span>
    <span class="py-docstring">This is the main function.</span>
    <span class="py-triple-quotes">"""</span>
    hello_world()

<span class="py-keyword">if</span> __name__ == <span class="py-string">"__main__"</span>:
    main()</div>
        </div>
    `;
}

function formatRectangleExample() {
    return `
        <div class="code-section">
            <div class="section-title">–ö–ª–∞—Å—Å Rectangle –Ω–∞ Python</div>
            <div class="python-code">
<span class="py-comment"># Rectangle class</span>
<span class="py-keyword">class</span> <span class="py-class">Rectangle</span>:
    <span class="py-comment"># Private properties</span>
    <span class="py-keyword">def</span> <span class="py-function">__init__</span>(self, width: <span class="py-class">float</span>, height: <span class="py-class">float</span>):
        self._width = width
        self._height = height
    
    <span class="py-comment"># Getters</span>
    <span class="py-keyword">def</span> <span class="py-function">get_width</span>(self) -> <span class="py-class">float</span>:
        <span class="py-keyword">return</span> self._width
    
    <span class="py-keyword">def</span> <span class="py-function">get_height</span>(self) -> <span class="py-class">float</span>:
        <span class="py-keyword">return</span> self._height
    
    <span class="py-comment"># Setters</span>
    <span class="py-keyword">def</span> <span class="py-function">set_width</span>(self, width: <span class="py-class">float</span>) -> <span class="py-keyword">None</span>:
        self._width = width
    
    <span class="py-keyword">def</span> <span class="py-function">set_height</span>(self, height: <span class="py-class">float</span>) -> <span class="py-keyword">None</span>:
        self._height = height
    
    <span class="py-comment"># Area calculation</span>
    <span class="py-keyword">def</span> <span class="py-function">get_area</span>(self) -> <span class="py-class">float</span>:
        <span class="py-keyword">return</span> self._width * self._height
    
    <span class="py-comment"># Perimeter calculation</span>
    <span class="py-keyword">def</span> <span class="py-function">get_perimeter</span>(self) -> <span class="py-class">float</span>:
        <span class="py-keyword">return</span> 2 * (self._width + self._height)
    
    <span class="py-comment"># Check if the rectangle is a square</span>
    <span class="py-keyword">def</span> <span class="py-function">is_square</span>(self) -> <span class="py-class">bool</span>:
        <span class="py-keyword">return</span> self._width == self._height</div>
        </div>
    `;
}

function formatSecurityExample() {
    return `
        <div class="code-section">
            <div class="section-title">–ü—Ä–∏–º–µ—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –Ω–∞ Python</div>
            <div class="python-code">
<span class="py-keyword">import</span> socket
<span class="py-keyword">import</span> threading
<span class="py-keyword">from</span> queue <span class="py-keyword">import</span> Queue

<span class="py-comment"># Target configuration</span>
target = <span class="py-string">"example.com"</span>
queue = Queue()
open_ports = []

<span class="py-comment"># Port scanner function</span>
<span class="py-keyword">def</span> <span class="py-function">port_scan</span>(port):
    <span class="py-keyword">try</span>:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))
        <span class="py-keyword">if</span> result == 0:
            open_ports.append(port)
        sock.close()
    <span class="py-keyword">except</span>:
        <span class="py-keyword">pass</span>

<span class="py-comment"># Thread worker</span>
<span class="py-keyword">def</span> <span class="py-function">worker</span>():
    <span class="py-keyword">while</span> <span class="py-keyword">not</span> queue.empty():
        port = queue.get()
        port_scan(port)
        queue.task_done()

<span class="py-comment"># Main scanning function</span>
<span class="py-keyword">def</span> <span class="py-function">run_scanner</span>(start_port, end_port, num_threads):
    <span class="py-keyword">for</span> port <span class="py-keyword">in</span> <span class="py-function">range</span>(start_port, end_port + 1):
        queue.put(port)
    
    threads = []
    <span class="py-keyword">for</span> _ <span class="py-keyword">in</span> <span class="py-function">range</span>(num_threads):
        thread = threading.Thread(target=worker)
        thread.daemon = True
        thread.start()
        threads.append(thread)
    
    queue.join()
    
    <span class="py-keyword">return</span> open_ports</div>
        </div>
    `;
}

// –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
const securityScripts = {
    networkAnalysis: `
<div class="code-section">
    <div class="section-title">–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ Python</div>
    <div class="python-code">
<span class="py-keyword">from</span> scapy.all <span class="py-keyword">import</span> *
<span class="py-keyword">import</span> logging
<span class="py-keyword">import</span> datetime

<span class="py-keyword">class</span> <span class="py-class">NetworkAnalyzer</span>:
    <span class="py-keyword">def</span> <span class="py-function">__init__</span>(self, interface=<span class="py-string">"eth0"</span>):
        self.interface = interface
        self.packets = []
        self.setup_logging()
    
    <span class="py-keyword">def</span> <span class="py-function">setup_logging</span>(self):
        logging.basicConfig(
            filename=<span class="py-string">f"network_analysis_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log"</span>,
            level=logging.INFO,
            format=<span class="py-string">'%(asctime)s - %(levelname)s - %(message)s'</span>
        )
    
    <span class="py-keyword">def</span> <span class="py-function">packet_callback</span>(self, packet):
        <span class="py-keyword">if</span> packet.haslayer(IP):
            self.packets.append(packet)
            self.analyze_packet(packet)
    
    <span class="py-keyword">def</span> <span class="py-function">analyze_packet</span>(self, packet):
        <span class="py-keyword">try</span>:
            src_ip = packet[IP].src
            dst_ip = packet[IP].dst
            protocol = packet[IP].proto
            
            <span class="py-comment"># –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</span>
            <span class="py-keyword">if</span> packet.haslayer(TCP):
                src_port = packet[TCP].sport
                dst_port = packet[TCP].dport
                flags = packet[TCP].flags
                self.analyze_tcp(src_ip, dst_ip, src_port, dst_port, flags)
            
            <span class="py-keyword">elif</span> packet.haslayer(UDP):
                self.analyze_udp(packet)
            
            <span class="py-keyword">elif</span> packet.haslayer(ICMP):
                self.analyze_icmp(packet)
            
        <span class="py-keyword">except</span> Exception <span class="py-keyword">as</span> e:
            logging.error(<span class="py-string">f"Error analyzing packet: {e}"</span>)
    
    <span class="py-keyword">def</span> <span class="py-function">analyze_tcp</span>(self, src_ip, dst_ip, src_port, dst_port, flags):
        <span class="py-comment"># –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π</span>
        suspicious = <span class="py-keyword">False</span>
        reason = []
        
        <span class="py-keyword">if</span> flags & 0x02 <span class="py-keyword">and</span> dst_port <span class="py-keyword">in</span> [22, 23, 3389]:  <span class="py-comment"># SYN –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–æ—Ä—Ç—ã</span>
            suspicious = <span class="py-keyword">True</span>
            reason.append(<span class="py-string">"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫—Ä–∏—Ç–∏—á–Ω–æ–º—É –ø–æ—Ä—Ç—É"</span>)
        
        <span class="py-keyword">if</span> suspicious:
            logging.warning(
                <span class="py-string">f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ TCP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:\n"</span>
                <span class="py-string">f"–ò—Å—Ç–æ—á–Ω–∏–∫: {src_ip}:{src_port}\n"</span>
                <span class="py-string">f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {dst_ip}:{dst_port}\n"</span>
                <span class="py-string">f"–ü—Ä–∏—á–∏–Ω–∞: {', '.join(reason)}"</span>
            )
    
    <span class="py-keyword">def</span> <span class="py-function">start_capture</span>(self, timeout=None):
        logging.info(<span class="py-string">f"Starting packet capture on interface {self.interface}"</span>)
        sniff(
            iface=self.interface,
            prn=self.packet_callback,
            timeout=timeout
        )
        
    <span class="py-keyword">def</span> <span class="py-function">generate_report</span>(self):
        <span class="py-comment"># –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</span>
        report = {
            <span class="py-string">"total_packets"</span>: len(self.packets),
            <span class="py-string">"protocols"</span>: {},
            <span class="py-string">"top_talkers"</span>: {},
            <span class="py-string">"suspicious_activity"</span>: []
        }
        
        <span class="py-keyword">return</span> report

<span class="py-comment"># –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</span>
<span class="py-keyword">if</span> __name__ == <span class="py-string">"__main__"</span>:
    analyzer = NetworkAnalyzer()
    analyzer.start_capture(timeout=60)  <span class="py-comment"># –ó–∞—Ö–≤–∞—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥</span>
    report = analyzer.generate_report()
    logging.info(<span class="py-string">f"Analysis complete. Found {report['total_packets']} packets."</span>)</div>
</div>`,

    systemAudit: `
<div class="code-section">
    <div class="section-title">–°–∫—Ä–∏–ø—Ç –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã</div>
    <div class="python-code">
<span class="py-keyword">import</span> os
<span class="py-keyword">import</span> subprocess
<span class="py-keyword">import</span> platform
<span class="py-keyword">import</span> json
<span class="py-keyword">from</span> datetime <span class="py-keyword">import</span> datetime

<span class="py-keyword">class</span> <span class="py-class">SecurityAuditor</span>:
    <span class="py-keyword">def</span> <span class="py-function">__init__</span>(self):
        self.system = platform.system()
        self.results = {
            <span class="py-string">"timestamp"</span>: datetime.now().isoformat(),
            <span class="py-string">"system_info"</span>: {},
            <span class="py-string">"security_checks"</span>: {},
            <span class="py-string">"vulnerabilities"</span>: []
        }
    
    <span class="py-keyword">def</span> <span class="py-function">check_system_info</span>(self):
        self.results[<span class="py-string">"system_info"</span>] = {
            <span class="py-string">"os"</span>: platform.platform(),
            <span class="py-string">"architecture"</span>: platform.architecture(),
            <span class="py-string">"python_version"</span>: platform.python_version(),
            <span class="py-string">"hostname"</span>: platform.node()
        }
    
    <span class="py-keyword">def</span> <span class="py-function">check_open_ports</span>(self):
        <span class="py-keyword">try</span>:
            <span class="py-keyword">if</span> self.system == <span class="py-string">"Linux"</span>:
                cmd = [<span class="py-string">"ss"</span>, <span class="py-string">"-tuln"</span>]
            <span class="py-keyword">else</span>:
                cmd = [<span class="py-string">"netstat"</span>, <span class="py-string">"-an"</span>]
            
            output = subprocess.check_output(cmd).decode()
            self.results[<span class="py-string">"security_checks"</span>][<span class="py-string">"open_ports"</span>] = output
        <span class="py-keyword">except</span> Exception <span class="py-keyword">as</span> e:
            self.results[<span class="py-string">"security_checks"</span>][<span class="py-string">"open_ports"</span>] = <span class="py-string">f"Error: {str(e)}"</span>
    
    <span class="py-keyword">def</span> <span class="py-function">check_system_updates</span>(self):
        <span class="py-keyword">try</span>:
            <span class="py-keyword">if</span> self.system == <span class="py-string">"Linux"</span>:
                output = subprocess.check_output([<span class="py-string">"apt"</span>, <span class="py-string">"list"</span>, <span class="py-string">"--upgradable"</span>]).decode()
            <span class="py-keyword">else</span>:
                output = <span class="py-string">"System update check not implemented for this OS"</span>
            
            self.results[<span class="py-string">"security_checks"</span>][<span class="py-string">"system_updates"</span>] = output
        <span class="py-keyword">except</span> Exception <span class="py-keyword">as</span> e:
            self.results[<span class="py-string">"security_checks"</span>][<span class="py-string">"system_updates"</span>] = <span class="py-string">f"Error: {str(e)}"</span>
    
    <span class="py-keyword">def</span> <span class="py-function">check_firewall_status</span>(self):
        <span class="py-keyword">try</span>:
            <span class="py-keyword">if</span> self.system == <span class="py-string">"Linux"</span>:
                output = subprocess.check_output([<span class="py-string">"ufw"</span>, <span class="py-string">"status"</span>]).decode()
            <span class="py-keyword">else</span>:
                output = subprocess.check_output([<span class="py-string">"netsh"</span>, <span class="py-string">"advfirewall"</span>, <span class="py-string">"show"</span>, <span class="py-string">"currentprofile"</span>]).decode()
            
            self.results[<span class="py-string">"security_checks"</span>][<span class="py-string">"firewall_status"</span>] = output
        <span class="py-keyword">except</span> Exception <span class="py-keyword">as</span> e:
            self.results[<span class="py-string">"security_checks"</span>][<span class="py-string">"firewall_status"</span>] = <span class="py-string">f"Error: {str(e)}"</span>
    
    <span class="py-keyword">def</span> <span class="py-function">run_full_audit</span>(self):
        self.check_system_info()
        self.check_open_ports()
        self.check_system_updates()
        self.check_firewall_status()
        
        <span class="py-keyword">return</span> self.results

<span class="py-comment"># –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</span>
<span class="py-keyword">if</span> __name__ == <span class="py-string">"__main__"</span>:
    auditor = SecurityAuditor()
    results = auditor.run_full_audit()
    
    <span class="py-keyword">with</span> open(<span class="py-string">"security_audit_report.json"</span>, <span class="py-string">"w"</span>) <span class="py-keyword">as</span> f:
        json.dump(results, f, indent=4)</div>
</div>`
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function detectSecurityTopic(message) {
    const topics = {
        network: ["—Å–µ—Ç—å", "—Ç—Ä–∞—Ñ–∏–∫", "–ø–∞–∫–µ—Ç—ã", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏"],
        system: ["–∞—É–¥–∏—Ç", "—Å–∏—Å—Ç–µ–º–∞", "—É—è–∑–≤–∏–º–æ—Å—Ç–∏", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"],
        web: ["–≤–µ–±", "—Å–∞–π—Ç", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–∏–Ω—ä–µ–∫—Ü–∏–∏", "xss"],
        forensics: ["—Ñ–æ—Ä–µ–Ω–∑–∏–∫–∞", "—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"],
        crypto: ["—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", "–∫–ª—é—á–∏", "—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è"]
    };
    
    message = message.toLowerCase();
    for (let [topic, keywords] of Object.entries(topics)) {
        if (keywords.some(keyword => message.includes(keyword))) {
            return topic;
        }
    }
    return null;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
function processMessage(message) {
    const topic = detectSecurityTopic(message);
    
    if (topic === "network") {
        return securityScripts.networkAnalysis;
    }
    
    if (topic === "system") {
        return securityScripts.systemAudit;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    const suggestions = [];
    for (let [area, details] of Object.entries(window.BOT_CONFIG.specializations)) {
        suggestions.push(`–ú–æ–≥—É –ø–æ–º–æ—á—å —Å ${details.topics.join(", ")}`);
        suggestions.push(`–†–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${details.tools.join(", ")}`);
    }
    
    return `–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\n${suggestions.join("\n")}`;
}

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const securitySuggestions = [
    "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –º–µ—Ç–æ–¥–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞?",
    "–ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã",
    "–†–∞—Å—Å–∫–∞–∂—É –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫",
    "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π?",
    "–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
    "–ú–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫"
];

let lastResponseTime = 0;
const RESPONSE_TIMEOUT = 30000; // 30 —Å–µ–∫—É–Ω–¥

function checkForContinuation() {
    const currentTime = Date.now();
    if (currentTime - lastResponseTime > RESPONSE_TIMEOUT) {
        const suggestion = securitySuggestions[Math.floor(Math.random() * securitySuggestions.length)];
        addMessage(suggestion, 'bot');
        lastResponseTime = currentTime;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
setInterval(checkForContinuation, 5000);

// Initialize chat when the page loads
document.addEventListener('DOMContentLoaded', async () => {
    try {
        console.log('Initializing CyberSec AI...');
        addMessage(`${window.BOT_CONFIG.name} v${window.BOT_CONFIG.version} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥, –∞–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.`, 'system');
        isInitialized = true;
    } catch (error) {
        console.error('Initialization error:', error);
        addMessage('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.', 'system');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
function createQuestionHeader(text) {
    const header = document.createElement('div');
    header.className = 'question-header';
    header.textContent = text;
    return header;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
function addQuestions(questions) {
    const container = document.querySelector('.messages-container');
    
    questions.forEach((question, index) => {
        setTimeout(() => {
            const header = createQuestionHeader(question);
            container.appendChild(header);
        }, index * 200); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    });
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const securityQuestions = [
    '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π?',
    '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –∑–∞—â–∏—Ç–µ –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π?',
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API?'
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
const AI_MODELS = {
    'gemini-2-flash': {
        name: 'Gemini 2.0 Flash',
        description: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏',
        icon: '‚ö°',
        maxTokens: 128000, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ >128K —Ç–æ–∫–µ–Ω–æ–≤
        temperature: 0.9,
        features: {
            multimodal: true,
            codeProcessing: true,
            nativeTools: true
        },
        limits: {
            rateLimit: '10 RPM',
            pricing: {
                under128k: '$0.00',
                over128k: '$0.00'
            },
            latency: '–ù–∏–∑–∫–∞—è',
            knowledgeCutoff: '–ê–≤–≥—É—Å—Ç 2024'
        },
        capabilities: [
            '–û–±—Ä–∞–±–æ—Ç–∫–∞ 10,000 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞',
            '–ù–∞—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
            '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            '–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ'
        ]
    },
    'gemini-pro': {
        name: 'Gemini Pro',
        description: '–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á',
        icon: 'üöÄ',
        maxTokens: 32768,
        temperature: 0.8
    },
    'gemini-ultra': {
        name: 'Gemini Ultra',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á',
        icon: 'üåü',
        maxTokens: 65536,
        temperature: 0.7
    }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
const RESPONSE_SETTINGS = {
    minWords: 200,
    includeExamples: true,
    includeExplanations: true,
    formatOutput: true,
    multimodalSupport: true
};

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
function addModelSelector() {
    const header = document.querySelector('.chat-header');
    
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const themeButton = header.querySelector('.theme-toggle');
    if (themeButton) {
        themeButton.remove();
    }
    
    const selector = document.createElement('div');
    selector.className = 'model-selector';
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    const button = document.createElement('button');
    button.className = 'model-select-btn';
    button.innerHTML = `
        <span class="current-model">
            ${AI_MODELS['gemini-2-flash'].icon} ${AI_MODELS['gemini-2-flash'].name}
        </span>
        <span class="model-arrow">‚ñº</span>
    `;
    
    // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
    const dropdown = document.createElement('div');
    dropdown.className = 'model-dropdown';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –≤ —Å–ø–∏—Å–æ–∫
    Object.entries(AI_MODELS).forEach(([id, model]) => {
        const option = document.createElement('div');
        option.className = 'model-option';
        option.dataset.modelId = id;
        option.innerHTML = `
            <span class="model-icon">${model.icon}</span>
            <div class="model-info">
                <div class="model-name">${model.name}</div>
                <div class="model-description">${model.description}</div>
            </div>
        `;
        
        option.addEventListener('click', () => selectModel(id));
        dropdown.appendChild(option);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞
    button.addEventListener('click', () => {
        dropdown.classList.toggle('show');
        button.classList.toggle('active');
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', (e) => {
        if (!selector.contains(e.target)) {
            dropdown.classList.remove('show');
            button.classList.remove('active');
        }
    });
    
    selector.appendChild(button);
    selector.appendChild(dropdown);
    header.appendChild(selector);
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
function selectModel(modelId) {
    const model = AI_MODELS[modelId];
    if (!model) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    const button = document.querySelector('.model-select-btn');
    button.querySelector('.current-model').innerHTML = `${model.icon} ${model.name}`;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
    document.querySelector('.model-dropdown').classList.remove('show');
    button.classList.remove('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –º–æ–¥–µ–ª–∏
    window.BOT_CONFIG = {
        ...window.BOT_CONFIG,
        currentModel: modelId,
        maxTokens: model.maxTokens,
        temperature: model.temperature,
        features: model.features || {},
        limits: model.limits || {},
        capabilities: model.capabilities || [],
        responseSettings: {
            ...RESPONSE_SETTINGS,
            multimodalSupport: model.features?.multimodal || false
        }
    };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showModelActivationNotice(model);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
function showModelActivationNotice(model) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(`${model.icon} –ú–æ–¥–µ–ª—å ${model.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    let modelInfo = `
    üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª—å ${model.name}
    
    üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏:
    ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${model.maxTokens.toLocaleString()} —Ç–æ–∫–µ–Ω–æ–≤
    ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${model.temperature}
    ${model.limits ? `
    ‚öôÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
    ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É: ${model.limits.rateLimit}
    ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å (–¥–æ 128K): ${model.limits.pricing.under128k}
    ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å (–ø–æ—Å–ª–µ 128K): ${model.limits.pricing.over128k}
    ‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: ${model.limits.knowledgeCutoff}
    ` : ''}
    ${model.capabilities ? `
    üí™ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    ${model.capabilities.map(cap => '‚Ä¢ ' + cap).join('\n')}
    ` : ''}
    
    ‚ú® –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.
    `;
    
    addMessage(modelInfo, 'system');
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
function processMessage(message) {
    const currentModel = AI_MODELS[window.BOT_CONFIG.currentModel];
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    const context = {
        model: currentModel,
        settings: RESPONSE_SETTINGS,
        maxTokens: currentModel.maxTokens,
        temperature: currentModel.temperature
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
    return generateDetailedResponse(message, context);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
function generateDetailedResponse(message, context) {
    let response = '';
    
    if (context.settings.includeExplanations) {
        response += generateTheoryAndConcepts(message);
    }
    
    if (context.settings.includeExamples) {
        response += generatePracticalExamples(message);
    }
    
    if (context.settings.formatOutput) {
        response = formatResponseWithMarkdown(response);
    }
    
    return response;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.innerHTML = message;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => notification.classList.add('show'), 100);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    addModelSelector();
});

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
async function handleMessage(message) {
    try {
        const model = AI_MODELS[window.BOT_CONFIG.currentModel];
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversationContext.history.push({
            role: 'user',
            content: message,
            timestamp: new Date().toISOString()
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const recentContext = conversationContext.history
            .slice(-conversationContext.contextWindow)
            .map(msg => `${msg.role}: ${msg.content}`)
            .join('\n');

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        let response = await getModelResponse(message, model, recentContext);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversationContext.history.push({
            role: 'assistant',
            content: response,
            timestamp: new Date().toISOString()
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (conversationContext.history.length > conversationContext.maxHistoryLength) {
            conversationContext.history = conversationContext.history
                .slice(-conversationContext.maxHistoryLength);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ localStorage
        saveConversationHistory();

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = cleanTextResponse(response);
        response = formatCodeBlocks(response);

        return response;
    } catch (error) {
        console.error('Error in handleMessage:', error);
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
function saveConversationHistory() {
    try {
        localStorage.setItem('conversationHistory', 
            JSON.stringify(conversationContext.history));
    } catch (error) {
        console.error('Error saving conversation history:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
function loadConversationHistory() {
    try {
        const savedHistory = localStorage.getItem('conversationHistory');
        if (savedHistory) {
            conversationContext.history = JSON.parse(savedHistory);
        }
    } catch (error) {
        console.error('Error loading conversation history:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    loadConversationHistory();
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
const conversationContext = {
    history: [],
    maxHistoryLength: 50, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
    contextWindow: 10 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
};

// –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cleanTextResponse(text) {
    return text
        .replace(/^\s*\*+/gm, '') // –£–¥–∞–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
        .replace(/\*\*(.*?)\*\*/g, '$1') // –£–¥–∞–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
        .replace(/\*(.*?)\*/g, '$1') // –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
        .replace(/_{2,}/g, '') // –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        .replace(/\s{2,}/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
        .trim();
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
function formatCodeBlocks(response) {
    const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/g;
    
    return response.replace(codeBlockRegex, (match, language, code) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        const lang = language || detectLanguage(code);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        return `<pre><code class="language-${lang}">${code.trim()}</code></pre>`;
    });
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
function detectLanguage(code) {
    if (code.includes('function') || code.includes('const') || code.includes('let')) {
        return 'javascript';
    } else if (code.includes('class') && code.includes('def')) {
        return 'python';
    } else if (code.includes('<?php')) {
        return 'php';
    } else if (code.includes('<html>') || code.includes('<!DOCTYPE')) {
        return 'html';
    } else if (code.includes('{') && code.includes('}') && code.includes(';')) {
        return 'css';
    }
    return 'plaintext';
}
